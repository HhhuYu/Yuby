// Implementation file for parser generated by fsyacc
module CubyPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "CubyPar.fsy"


open AbstractSyntax

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = ConstInt 10


# 18 "CubyPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | COLON
  | CONTINUE
  | BREAK
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | SELFPLUS
  | SELFMINUS
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | SWITCH
  | CASE
  | FOR
  | IN
  | RANGE
  | STRING
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_COLON
    | TOKEN_CONTINUE
    | TOKEN_BREAK
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_SELFPLUS
    | TOKEN_SELFMINUS
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_FOR
    | TOKEN_IN
    | TOKEN_RANGE
    | TOKEN_STRING
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_TopDeclares
    | NONTERM_TopDeclare
    | NONTERM_VariableDeclare
    | NONTERM_VariableDescribe
    | NONTERM_FunctionDeclare
    | NONTERM_ParamDeclares
    | NONTERM_ParamDeclaresNotEmpty
    | NONTERM_Block
    | NONTERM_StmtOrDeclareSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtC
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_ConstString
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | COLON  -> 11 
  | CONTINUE  -> 12 
  | BREAK  -> 13 
  | NOT  -> 14 
  | SEQOR  -> 15 
  | SEQAND  -> 16 
  | EQ  -> 17 
  | NE  -> 18 
  | GT  -> 19 
  | LT  -> 20 
  | GE  -> 21 
  | LE  -> 22 
  | PLUS  -> 23 
  | MINUS  -> 24 
  | TIMES  -> 25 
  | DIV  -> 26 
  | MOD  -> 27 
  | SELFPLUS  -> 28 
  | SELFMINUS  -> 29 
  | CHAR  -> 30 
  | ELSE  -> 31 
  | IF  -> 32 
  | INT  -> 33 
  | NULL  -> 34 
  | PRINT  -> 35 
  | PRINTLN  -> 36 
  | RETURN  -> 37 
  | VOID  -> 38 
  | WHILE  -> 39 
  | SWITCH  -> 40 
  | CASE  -> 41 
  | FOR  -> 42 
  | IN  -> 43 
  | RANGE  -> 44 
  | STRING  -> 45 
  | CSTSTRING _ -> 46 
  | NAME _ -> 47 
  | CSTINT _ -> 48 
  | CSTBOOL _ -> 49 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_COLON 
  | 12 -> TOKEN_CONTINUE 
  | 13 -> TOKEN_BREAK 
  | 14 -> TOKEN_NOT 
  | 15 -> TOKEN_SEQOR 
  | 16 -> TOKEN_SEQAND 
  | 17 -> TOKEN_EQ 
  | 18 -> TOKEN_NE 
  | 19 -> TOKEN_GT 
  | 20 -> TOKEN_LT 
  | 21 -> TOKEN_GE 
  | 22 -> TOKEN_LE 
  | 23 -> TOKEN_PLUS 
  | 24 -> TOKEN_MINUS 
  | 25 -> TOKEN_TIMES 
  | 26 -> TOKEN_DIV 
  | 27 -> TOKEN_MOD 
  | 28 -> TOKEN_SELFPLUS 
  | 29 -> TOKEN_SELFMINUS 
  | 30 -> TOKEN_CHAR 
  | 31 -> TOKEN_ELSE 
  | 32 -> TOKEN_IF 
  | 33 -> TOKEN_INT 
  | 34 -> TOKEN_NULL 
  | 35 -> TOKEN_PRINT 
  | 36 -> TOKEN_PRINTLN 
  | 37 -> TOKEN_RETURN 
  | 38 -> TOKEN_VOID 
  | 39 -> TOKEN_WHILE 
  | 40 -> TOKEN_SWITCH 
  | 41 -> TOKEN_CASE 
  | 42 -> TOKEN_FOR 
  | 43 -> TOKEN_IN 
  | 44 -> TOKEN_RANGE 
  | 45 -> TOKEN_STRING 
  | 46 -> TOKEN_CSTSTRING 
  | 47 -> TOKEN_NAME 
  | 48 -> TOKEN_CSTINT 
  | 49 -> TOKEN_CSTBOOL 
  | 52 -> TOKEN_end_of_input
  | 50 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_TopDeclares 
    | 3 -> NONTERM_TopDeclares 
    | 4 -> NONTERM_TopDeclare 
    | 5 -> NONTERM_TopDeclare 
    | 6 -> NONTERM_VariableDeclare 
    | 7 -> NONTERM_VariableDescribe 
    | 8 -> NONTERM_VariableDescribe 
    | 9 -> NONTERM_VariableDescribe 
    | 10 -> NONTERM_VariableDescribe 
    | 11 -> NONTERM_VariableDescribe 
    | 12 -> NONTERM_FunctionDeclare 
    | 13 -> NONTERM_FunctionDeclare 
    | 14 -> NONTERM_ParamDeclares 
    | 15 -> NONTERM_ParamDeclares 
    | 16 -> NONTERM_ParamDeclaresNotEmpty 
    | 17 -> NONTERM_ParamDeclaresNotEmpty 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDeclareSeq 
    | 20 -> NONTERM_StmtOrDeclareSeq 
    | 21 -> NONTERM_StmtOrDeclareSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtM 
    | 33 -> NONTERM_StmtC 
    | 34 -> NONTERM_StmtC 
    | 35 -> NONTERM_StmtU 
    | 36 -> NONTERM_StmtU 
    | 37 -> NONTERM_StmtU 
    | 38 -> NONTERM_Expr 
    | 39 -> NONTERM_Expr 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_AtExprNotAccess 
    | 60 -> NONTERM_AtExprNotAccess 
    | 61 -> NONTERM_AtExprNotAccess 
    | 62 -> NONTERM_AtExprNotAccess 
    | 63 -> NONTERM_Access 
    | 64 -> NONTERM_Access 
    | 65 -> NONTERM_Access 
    | 66 -> NONTERM_Access 
    | 67 -> NONTERM_Access 
    | 68 -> NONTERM_Exprs 
    | 69 -> NONTERM_Exprs 
    | 70 -> NONTERM_Exprs1 
    | 71 -> NONTERM_Exprs1 
    | 72 -> NONTERM_Const 
    | 73 -> NONTERM_Const 
    | 74 -> NONTERM_Const 
    | 75 -> NONTERM_Const 
    | 76 -> NONTERM_ConstString 
    | 77 -> NONTERM_Type 
    | 78 -> NONTERM_Type 
    | 79 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 52 
let _fsyacc_tagOfErrorTerminal = 50

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | COLON  -> "COLON" 
  | CONTINUE  -> "CONTINUE" 
  | BREAK  -> "BREAK" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | SELFPLUS  -> "SELFPLUS" 
  | SELFMINUS  -> "SELFMINUS" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | FOR  -> "FOR" 
  | IN  -> "IN" 
  | RANGE  -> "RANGE" 
  | STRING  -> "STRING" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | CONTINUE  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | SELFPLUS  -> (null : System.Object) 
  | SELFMINUS  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | RANGE  -> (null : System.Object) 
  | STRING  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 14us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 62us; 54us; 70us; 54us; 78us; 54us; 79us; 54us; 81us; 54us; 82us; 54us; 90us; 54us; 91us; 54us; 102us; 54us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 4us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 79us; 106us; 12us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 62us; 63us; 70us; 71us; 78us; 80us; 79us; 46us; 81us; 83us; 82us; 83us; 90us; 92us; 91us; 92us; 102us; 103us; 2us; 65535us; 97us; 98us; 103us; 104us; 6us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 79us; 47us; 82us; 105us; 91us; 107us; 44us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 55us; 64us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 48us; 66us; 67us; 68us; 69us; 70us; 48us; 74us; 77us; 75us; 76us; 78us; 48us; 79us; 48us; 81us; 48us; 82us; 48us; 86us; 89us; 87us; 88us; 90us; 48us; 91us; 48us; 94us; 95us; 102us; 48us; 113us; 114us; 116us; 139us; 119us; 120us; 121us; 122us; 140us; 124us; 141us; 125us; 142us; 126us; 143us; 127us; 144us; 128us; 145us; 129us; 146us; 130us; 147us; 131us; 148us; 132us; 149us; 133us; 150us; 134us; 151us; 135us; 152us; 137us; 155us; 136us; 166us; 138us; 169us; 139us; 44us; 65535us; 37us; 110us; 40us; 110us; 43us; 110us; 50us; 110us; 55us; 110us; 56us; 111us; 58us; 110us; 60us; 110us; 62us; 110us; 66us; 110us; 68us; 110us; 70us; 110us; 74us; 110us; 75us; 110us; 78us; 110us; 79us; 110us; 81us; 110us; 82us; 110us; 86us; 110us; 87us; 110us; 90us; 110us; 91us; 110us; 94us; 110us; 102us; 110us; 113us; 110us; 116us; 110us; 119us; 110us; 121us; 110us; 140us; 110us; 141us; 110us; 142us; 110us; 143us; 110us; 144us; 110us; 145us; 110us; 146us; 110us; 147us; 110us; 148us; 110us; 149us; 110us; 150us; 110us; 151us; 110us; 152us; 110us; 155us; 111us; 166us; 110us; 169us; 110us; 45us; 65535us; 37us; 112us; 40us; 112us; 43us; 112us; 50us; 112us; 55us; 112us; 56us; 112us; 58us; 112us; 60us; 112us; 62us; 112us; 66us; 112us; 68us; 112us; 70us; 112us; 74us; 112us; 75us; 112us; 78us; 112us; 79us; 112us; 81us; 112us; 82us; 112us; 86us; 112us; 87us; 112us; 90us; 112us; 91us; 112us; 94us; 112us; 102us; 112us; 113us; 112us; 116us; 112us; 119us; 112us; 121us; 112us; 140us; 112us; 141us; 112us; 142us; 112us; 143us; 112us; 144us; 112us; 145us; 112us; 146us; 112us; 147us; 112us; 148us; 112us; 149us; 112us; 150us; 112us; 151us; 112us; 152us; 112us; 155us; 112us; 163us; 165us; 166us; 112us; 169us; 112us; 47us; 65535us; 37us; 109us; 40us; 109us; 43us; 109us; 50us; 109us; 55us; 109us; 56us; 108us; 58us; 109us; 60us; 109us; 62us; 109us; 66us; 109us; 68us; 109us; 70us; 109us; 74us; 109us; 75us; 109us; 78us; 109us; 79us; 109us; 81us; 109us; 82us; 109us; 86us; 109us; 87us; 109us; 90us; 109us; 91us; 109us; 94us; 109us; 102us; 109us; 113us; 109us; 116us; 109us; 119us; 109us; 121us; 109us; 140us; 109us; 141us; 109us; 142us; 109us; 143us; 109us; 144us; 109us; 145us; 109us; 146us; 109us; 147us; 109us; 148us; 109us; 149us; 109us; 150us; 109us; 151us; 109us; 152us; 109us; 155us; 108us; 157us; 158us; 160us; 161us; 163us; 164us; 166us; 109us; 169us; 109us; 1us; 65535us; 116us; 117us; 2us; 65535us; 116us; 168us; 169us; 170us; 46us; 65535us; 37us; 153us; 40us; 153us; 43us; 153us; 50us; 153us; 55us; 153us; 56us; 153us; 58us; 153us; 60us; 153us; 62us; 153us; 66us; 153us; 68us; 153us; 70us; 153us; 74us; 153us; 75us; 153us; 78us; 153us; 79us; 153us; 81us; 153us; 82us; 153us; 86us; 153us; 87us; 153us; 90us; 153us; 91us; 153us; 94us; 153us; 100us; 101us; 102us; 153us; 113us; 153us; 116us; 153us; 119us; 153us; 121us; 153us; 140us; 153us; 141us; 153us; 142us; 153us; 143us; 153us; 144us; 153us; 145us; 153us; 146us; 153us; 147us; 153us; 148us; 153us; 149us; 153us; 150us; 153us; 151us; 153us; 152us; 153us; 155us; 153us; 163us; 153us; 166us; 153us; 169us; 153us; 45us; 65535us; 37us; 154us; 40us; 154us; 43us; 154us; 50us; 154us; 55us; 154us; 56us; 154us; 58us; 154us; 60us; 154us; 62us; 154us; 66us; 154us; 68us; 154us; 70us; 154us; 74us; 154us; 75us; 154us; 78us; 154us; 79us; 154us; 81us; 154us; 82us; 154us; 86us; 154us; 87us; 154us; 90us; 154us; 91us; 154us; 94us; 154us; 102us; 154us; 113us; 154us; 116us; 154us; 119us; 154us; 121us; 154us; 140us; 154us; 141us; 154us; 142us; 154us; 143us; 154us; 144us; 154us; 145us; 154us; 146us; 154us; 147us; 154us; 148us; 154us; 149us; 154us; 150us; 154us; 151us; 154us; 152us; 154us; 155us; 154us; 163us; 154us; 166us; 154us; 169us; 154us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 48us; 52us; 57us; 70us; 73us; 80us; 125us; 170us; 216us; 264us; 266us; 269us; 316us; 362us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 30us; 35us; 1us; 23us; 14us; 24us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 14us; 26us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 26us; 1us; 27us; 2us; 28us; 29us; 3us; 28us; 61us; 64us; 14us; 28us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 28us; 14us; 28us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 28us; 14us; 28us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 28us; 1us; 28us; 14us; 29us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 29us; 1us; 29us; 14us; 29us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 29us; 14us; 29us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 29us; 1us; 29us; 1us; 30us; 3us; 30us; 35us; 36us; 1us; 30us; 3us; 30us; 35us; 36us; 16us; 30us; 35us; 36us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 30us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 30us; 3us; 30us; 35us; 36us; 1us; 30us; 1us; 30us; 2us; 30us; 35us; 1us; 30us; 1us; 31us; 2us; 31us; 37us; 1us; 31us; 2us; 31us; 37us; 15us; 31us; 37us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 31us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 31us; 2us; 31us; 37us; 1us; 31us; 1us; 32us; 1us; 32us; 14us; 32us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 2us; 33us; 34us; 2us; 33us; 34us; 2us; 33us; 34us; 2us; 33us; 34us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 4us; 38us; 41us; 64us; 67us; 3us; 38us; 41us; 67us; 1us; 39us; 2us; 39us; 61us; 1us; 40us; 1us; 41us; 14us; 41us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 2us; 42us; 63us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 14us; 43us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 44us; 14us; 44us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 45us; 14us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 58us; 13us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 67us; 15us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 70us; 71us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 2us; 61us; 64us; 1us; 61us; 1us; 62us; 2us; 62us; 67us; 1us; 63us; 1us; 64us; 2us; 64us; 67us; 1us; 64us; 2us; 65us; 66us; 2us; 65us; 67us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 69us; 1us; 71us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 79us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 123us; 125us; 128us; 130us; 145us; 147us; 149us; 152us; 156us; 171us; 173us; 188us; 190us; 205us; 207us; 209us; 224us; 226us; 228us; 243us; 245us; 260us; 262us; 264us; 266us; 270us; 272us; 276us; 293us; 308us; 310us; 314us; 316us; 318us; 321us; 323us; 325us; 328us; 330us; 333us; 349us; 364us; 366us; 369us; 371us; 373us; 375us; 390us; 392us; 394us; 396us; 398us; 401us; 404us; 407us; 410us; 412us; 414us; 416us; 418us; 423us; 427us; 429us; 432us; 434us; 436us; 451us; 454us; 456us; 458us; 460us; 462us; 477us; 479us; 494us; 496us; 511us; 526us; 541us; 556us; 571us; 586us; 601us; 616us; 631us; 646us; 661us; 676us; 690us; 705us; 720us; 736us; 738us; 740us; 742us; 744us; 746us; 748us; 750us; 752us; 754us; 756us; 758us; 760us; 762us; 764us; 766us; 769us; 771us; 773us; 776us; 778us; 780us; 783us; 785us; 788us; 791us; 793us; 795us; 797us; 799us; 801us; 803us; 805us; 807us; 809us; 811us; 813us; 815us; 817us; 819us; |]
let _fsyacc_action_rows = 180
let _fsyacc_actionTableElements = [|4us; 16386us; 30us; 178us; 33us; 177us; 38us; 23us; 45us; 179us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 4us; 16386us; 30us; 178us; 33us; 177us; 38us; 23us; 45us; 179us; 0us; 16387us; 1us; 32768us; 7us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 1us; 16us; 25us; 14us; 47us; 12us; 3us; 32768us; 1us; 16us; 25us; 14us; 47us; 13us; 1us; 16390us; 5us; 19us; 0us; 16391us; 1us; 16391us; 1us; 29us; 3us; 32768us; 1us; 16us; 25us; 14us; 47us; 12us; 1us; 16392us; 5us; 19us; 3us; 32768us; 1us; 16us; 25us; 14us; 47us; 12us; 2us; 32768us; 2us; 18us; 5us; 19us; 0us; 16393us; 2us; 32768us; 6us; 20us; 48us; 21us; 0us; 16394us; 1us; 32768us; 6us; 22us; 0us; 16395us; 1us; 32768us; 47us; 24us; 1us; 32768us; 1us; 25us; 3us; 16398us; 30us; 178us; 33us; 177us; 45us; 179us; 1us; 32768us; 2us; 27us; 1us; 32768us; 3us; 37us; 0us; 16396us; 3us; 16398us; 30us; 178us; 33us; 177us; 45us; 179us; 1us; 32768us; 2us; 31us; 1us; 32768us; 3us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 8us; 35us; 3us; 32768us; 30us; 178us; 33us; 177us; 45us; 179us; 0us; 16401us; 21us; 16403us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 30us; 178us; 32us; 73us; 33us; 177us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 85us; 40us; 93us; 42us; 55us; 45us; 179us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 1us; 32768us; 4us; 39us; 0us; 16402us; 21us; 16403us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 30us; 178us; 32us; 73us; 33us; 177us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 85us; 40us; 93us; 42us; 55us; 45us; 179us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16404us; 1us; 32768us; 7us; 43us; 21us; 16403us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 30us; 178us; 32us; 73us; 33us; 177us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 85us; 40us; 93us; 42us; 55us; 45us; 179us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 31us; 82us; 0us; 16407us; 14us; 32768us; 7us; 49us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 0us; 16408us; 13us; 32768us; 1us; 155us; 7us; 51us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16409us; 14us; 32768us; 7us; 53us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 0us; 16410us; 0us; 16411us; 12us; 32768us; 1us; 56us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 14us; 32768us; 7us; 58us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 14us; 32768us; 7us; 60us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 14us; 32768us; 2us; 62us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 18us; 32768us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 32us; 72us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 84us; 40us; 93us; 42us; 55us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16412us; 14us; 32768us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 43us; 65us; 1us; 32768us; 1us; 66us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 14us; 32768us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 44us; 68us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 14us; 32768us; 2us; 70us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 18us; 32768us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 32us; 72us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 84us; 40us; 93us; 42us; 55us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16413us; 1us; 32768us; 1us; 74us; 1us; 32768us; 1us; 75us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 14us; 32768us; 2us; 79us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 14us; 32768us; 2us; 78us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 18us; 32768us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 32us; 72us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 84us; 40us; 93us; 42us; 55us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 18us; 32768us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 32us; 73us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 85us; 40us; 93us; 42us; 55us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 1us; 32768us; 31us; 81us; 18us; 32768us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 32us; 72us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 84us; 40us; 93us; 42us; 55us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 18us; 32768us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 32us; 73us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 85us; 40us; 93us; 42us; 55us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16414us; 1us; 32768us; 1us; 86us; 1us; 32768us; 1us; 87us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 14us; 32768us; 2us; 91us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 14us; 32768us; 2us; 90us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 18us; 32768us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 32us; 72us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 84us; 40us; 93us; 42us; 55us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 18us; 32768us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 32us; 73us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 85us; 40us; 93us; 42us; 55us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16415us; 1us; 32768us; 1us; 94us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 14us; 32768us; 2us; 96us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 1us; 32768us; 3us; 97us; 1us; 32768us; 41us; 100us; 1us; 32768us; 4us; 99us; 0us; 16416us; 4us; 32768us; 24us; 173us; 34us; 175us; 48us; 171us; 49us; 172us; 1us; 32768us; 11us; 102us; 18us; 32768us; 1us; 155us; 3us; 37us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 32us; 72us; 34us; 175us; 35us; 121us; 36us; 123us; 37us; 50us; 39us; 84us; 40us; 93us; 42us; 55us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 1us; 16417us; 41us; 100us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 3us; 16422us; 2us; 162us; 5us; 166us; 9us; 113us; 2us; 16422us; 5us; 166us; 9us; 113us; 0us; 16423us; 1us; 16423us; 2us; 156us; 0us; 16424us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 13us; 16425us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 1us; 16447us; 1us; 116us; 12us; 16452us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 1us; 32768us; 2us; 118us; 0us; 16426us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16427us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 13us; 16428us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 0us; 16429us; 3us; 16430us; 25us; 142us; 26us; 143us; 27us; 144us; 3us; 16431us; 25us; 142us; 26us; 143us; 27us; 144us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 9us; 16435us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 9us; 16436us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 5us; 16437us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 5us; 16438us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 5us; 16439us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 5us; 16440us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 11us; 16441us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 13us; 32768us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 12us; 16442us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 14us; 32768us; 6us; 167us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 14us; 16454us; 8us; 169us; 15us; 152us; 16us; 151us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 148us; 21us; 149us; 22us; 150us; 23us; 140us; 24us; 141us; 25us; 142us; 26us; 143us; 27us; 144us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16443us; 0us; 16444us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16445us; 3us; 32768us; 1us; 160us; 25us; 163us; 47us; 159us; 1us; 16446us; 5us; 166us; 0us; 16447us; 3us; 32768us; 1us; 160us; 25us; 163us; 47us; 159us; 2us; 32768us; 2us; 162us; 5us; 166us; 0us; 16448us; 9us; 32768us; 1us; 155us; 10us; 157us; 24us; 173us; 25us; 163us; 34us; 175us; 46us; 176us; 47us; 159us; 48us; 171us; 49us; 172us; 1us; 16449us; 5us; 166us; 0us; 16450us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16451us; 0us; 16453us; 12us; 32768us; 1us; 155us; 10us; 157us; 14us; 119us; 24us; 173us; 25us; 163us; 34us; 175us; 35us; 121us; 36us; 123us; 46us; 176us; 47us; 115us; 48us; 171us; 49us; 172us; 0us; 16455us; 0us; 16456us; 0us; 16457us; 1us; 32768us; 48us; 174us; 0us; 16458us; 0us; 16459us; 0us; 16460us; 0us; 16461us; 0us; 16462us; 0us; 16463us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 8us; 9us; 14us; 15us; 17us; 18us; 19us; 23us; 27us; 29us; 30us; 32us; 36us; 38us; 42us; 45us; 46us; 49us; 50us; 52us; 53us; 55us; 57us; 61us; 63us; 65us; 66us; 70us; 72us; 74us; 75us; 76us; 78us; 82us; 83us; 105us; 107us; 108us; 130us; 131us; 133us; 155us; 156us; 157us; 159us; 160us; 175us; 176us; 190us; 191us; 206us; 207us; 208us; 221us; 234us; 249us; 262us; 277us; 290us; 305us; 324us; 325us; 340us; 342us; 355us; 370us; 383us; 398us; 417us; 418us; 420us; 422us; 435us; 448us; 463us; 478us; 497us; 516us; 518us; 537us; 556us; 557us; 559us; 561us; 574us; 587us; 602us; 617us; 636us; 655us; 656us; 658us; 671us; 686us; 688us; 690us; 692us; 693us; 698us; 700us; 719us; 721us; 722us; 723us; 724us; 725us; 729us; 732us; 733us; 735us; 736us; 749us; 763us; 765us; 778us; 780us; 781us; 794us; 795us; 808us; 822us; 823us; 827us; 831us; 832us; 833us; 834us; 844us; 854us; 860us; 866us; 872us; 878us; 890us; 904us; 917us; 932us; 947us; 960us; 973us; 986us; 999us; 1012us; 1025us; 1038us; 1051us; 1064us; 1077us; 1090us; 1103us; 1116us; 1117us; 1118us; 1131us; 1132us; 1136us; 1138us; 1139us; 1143us; 1146us; 1147us; 1157us; 1159us; 1160us; 1173us; 1174us; 1175us; 1188us; 1189us; 1190us; 1191us; 1193us; 1194us; 1195us; 1196us; 1197us; 1198us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 9us; 9us; 7us; 5us; 7us; 4us; 5us; 7us; 5us; 5us; 1us; 1us; 1us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 21us; 21us; 22us; 23us; 23us; 23us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 16418us; 16419us; 16420us; 16421us; 65535us; 65535us; 16423us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 16429us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16443us; 16444us; 65535us; 16445us; 65535us; 65535us; 16447us; 65535us; 65535us; 16448us; 65535us; 65535us; 16450us; 65535us; 16451us; 16453us; 65535us; 16455us; 16456us; 16457us; 65535us; 16458us; 16459us; 16460us; 16461us; 16462us; 16463us; |]
let _fsyacc_reductions ()  =    [| 
# 469 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AbstractSyntax.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 478 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopDeclares)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "CubyPar.fsy"
                                                               Prog _1 
                   )
# 40 "CubyPar.fsy"
                 : AbstractSyntax.Program));
# 489 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "CubyPar.fsy"
                                                               [] 
                   )
# 44 "CubyPar.fsy"
                 : 'TopDeclares));
# 499 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopDeclare)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopDeclares)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "CubyPar.fsy"
                                                               _1 :: _2 
                   )
# 45 "CubyPar.fsy"
                 : 'TopDeclares));
# 511 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VariableDeclare)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "CubyPar.fsy"
                                                               VariableDeclare(fst _1, snd _1) 
                   )
# 49 "CubyPar.fsy"
                 : 'TopDeclare));
# 522 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunctionDeclare)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CubyPar.fsy"
                                                               _1 
                   )
# 50 "CubyPar.fsy"
                 : 'TopDeclare));
# 533 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'VariableDescribe)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "CubyPar.fsy"
                                                                ((fst _2) _1, snd _2 ) 
                   )
# 54 "CubyPar.fsy"
                 : 'VariableDeclare));
# 545 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CubyPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 59 "CubyPar.fsy"
                 : 'VariableDescribe));
# 556 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'VariableDescribe)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CubyPar.fsy"
                                                                compose1 TypePoint _2                        
                   )
# 60 "CubyPar.fsy"
                 : 'VariableDescribe));
# 567 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'VariableDescribe)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CubyPar.fsy"
                                                                _2                                      
                   )
# 61 "CubyPar.fsy"
                 : 'VariableDescribe));
# 578 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VariableDescribe)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CubyPar.fsy"
                                                                        compose1 (fun t -> TypeArray(t, None)) _1    
                   )
# 62 "CubyPar.fsy"
                 : 'VariableDescribe));
# 589 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VariableDescribe)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CubyPar.fsy"
                                                                        compose1 (fun t -> TypeArray(t, Some _3)) _1 
                   )
# 63 "CubyPar.fsy"
                 : 'VariableDescribe));
# 601 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ParamDeclares)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CubyPar.fsy"
                                                                   FunctionDeclare(None,     _2, _4, _6) 
                   )
# 67 "CubyPar.fsy"
                 : 'FunctionDeclare));
# 614 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ParamDeclares)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CubyPar.fsy"
                                                                   FunctionDeclare(Some(_1), _2, _4, _6) 
                   )
# 68 "CubyPar.fsy"
                 : 'FunctionDeclare));
# 628 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CubyPar.fsy"
                                                               [] 
                   )
# 72 "CubyPar.fsy"
                 : 'ParamDeclares));
# 638 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ParamDeclaresNotEmpty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "CubyPar.fsy"
                                                               _1 
                   )
# 73 "CubyPar.fsy"
                 : 'ParamDeclares));
# 649 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VariableDeclare)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CubyPar.fsy"
                                                                       [_1]     
                   )
# 77 "CubyPar.fsy"
                 : 'ParamDeclaresNotEmpty));
# 660 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VariableDeclare)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ParamDeclaresNotEmpty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CubyPar.fsy"
                                                                             _1 :: _3 
                   )
# 78 "CubyPar.fsy"
                 : 'ParamDeclaresNotEmpty));
# 672 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDeclareSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CubyPar.fsy"
                                                                   Block _2 
                   )
# 82 "CubyPar.fsy"
                 : 'Block));
# 683 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CubyPar.fsy"
                                                               [] 
                   )
# 86 "CubyPar.fsy"
                 : 'StmtOrDeclareSeq));
# 693 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDeclareSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CubyPar.fsy"
                                                                 Statement _1 :: _2 
                   )
# 87 "CubyPar.fsy"
                 : 'StmtOrDeclareSeq));
# 705 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VariableDeclare)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDeclareSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CubyPar.fsy"
                                                                 Declare (fst _1, snd _1) :: _3 
                   )
# 88 "CubyPar.fsy"
                 : 'StmtOrDeclareSeq));
# 717 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CubyPar.fsy"
                                                               _1 
                   )
# 92 "CubyPar.fsy"
                 : 'Stmt));
# 728 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "CubyPar.fsy"
                                                               _1 
                   )
# 93 "CubyPar.fsy"
                 : 'Stmt));
# 739 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CubyPar.fsy"
                                                               Expression(_1)       
                   )
# 97 "CubyPar.fsy"
                 : 'StmtM));
# 750 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "CubyPar.fsy"
                                                               Return None          
                   )
# 98 "CubyPar.fsy"
                 : 'StmtM));
# 760 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CubyPar.fsy"
                                                               Return(Some(_2))     
                   )
# 101 "CubyPar.fsy"
                 : 'StmtM));
# 771 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CubyPar.fsy"
                                                               _1                   
                   )
# 102 "CubyPar.fsy"
                 : 'StmtM));
# 782 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CubyPar.fsy"
                                                                            For(_3,_5,_7,_9)  
                   )
# 103 "CubyPar.fsy"
                 : 'StmtM));
# 796 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CubyPar.fsy"
                                                                            Range(_2,_5,_7,_9)
                   )
# 104 "CubyPar.fsy"
                 : 'StmtM));
# 810 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CubyPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 105 "CubyPar.fsy"
                 : 'StmtM));
# 823 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CubyPar.fsy"
                                                               While(_3, _5)        
                   )
# 106 "CubyPar.fsy"
                 : 'StmtM));
# 835 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CubyPar.fsy"
                                                                            Switch(_3,_6)  
                   )
# 107 "CubyPar.fsy"
                 : 'StmtM));
# 847 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "CubyPar.fsy"
                                                                [Case(_2,_4)]
                   )
# 111 "CubyPar.fsy"
                 : 'StmtC));
# 859 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "CubyPar.fsy"
                                                                Case(_2,_4) :: _5
                   )
# 112 "CubyPar.fsy"
                 : 'StmtC));
# 872 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "CubyPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 116 "CubyPar.fsy"
                 : 'StmtU));
# 885 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "CubyPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 117 "CubyPar.fsy"
                 : 'StmtU));
# 897 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "CubyPar.fsy"
                                                               While(_3, _5)        
                   )
# 118 "CubyPar.fsy"
                 : 'StmtU));
# 909 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "CubyPar.fsy"
                                                               Access _1           
                   )
# 122 "CubyPar.fsy"
                 : 'Expr));
# 920 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "CubyPar.fsy"
                                                               _1                  
                   )
# 123 "CubyPar.fsy"
                 : 'Expr));
# 931 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CubyPar.fsy"
                                                               _1                  
                   )
# 127 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 942 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CubyPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 128 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 954 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "CubyPar.fsy"
                                                               CallOperator(_1, _3)        
                   )
# 129 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 966 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CubyPar.fsy"
                                                               UnaryPrimitiveOperator("!", _2)      
                   )
# 130 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 977 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CubyPar.fsy"
                                                               UnaryPrimitiveOperator("printi", _2) 
                   )
# 131 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 988 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CubyPar.fsy"
                                                               UnaryPrimitiveOperator("printc", nl) 
                   )
# 134 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 998 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator("+",  _1, _3) 
                   )
# 135 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1010 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator("-",  _1, _3) 
                   )
# 136 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1022 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator("*",  _1, _3) 
                   )
# 137 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1034 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator("/",  _1, _3) 
                   )
# 138 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1046 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator("%",  _1, _3) 
                   )
# 139 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1058 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator("==", _1, _3) 
                   )
# 140 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1070 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator("!=", _1, _3) 
                   )
# 141 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1082 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator(">",  _1, _3) 
                   )
# 142 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1094 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator("<",  _1, _3) 
                   )
# 143 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1106 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator(">=", _1, _3) 
                   )
# 144 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1118 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CubyPar.fsy"
                                                               BinaryPrimitiveOperator("<=", _1, _3) 
                   )
# 145 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1130 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CubyPar.fsy"
                                                               AndOperator(_1, _3)     
                   )
# 146 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1142 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CubyPar.fsy"
                                                               OrOperator(_1, _3)      
                   )
# 147 "CubyPar.fsy"
                 : 'ExprNotAccess));
# 1154 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CubyPar.fsy"
                                                               ConstInt _1             
                   )
# 151 "CubyPar.fsy"
                 : 'AtExprNotAccess));
# 1165 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ConstString)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CubyPar.fsy"
                                                               ConstString(_1)         
                   )
# 152 "CubyPar.fsy"
                 : 'AtExprNotAccess));
# 1176 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CubyPar.fsy"
                                                               _2                      
                   )
# 153 "CubyPar.fsy"
                 : 'AtExprNotAccess));
# 1187 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CubyPar.fsy"
                                                               Address _2              
                   )
# 154 "CubyPar.fsy"
                 : 'AtExprNotAccess));
# 1198 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "CubyPar.fsy"
                                                               AccessVariable _1           
                   )
# 158 "CubyPar.fsy"
                 : 'Access));
# 1209 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "CubyPar.fsy"
                                                               _2                  
                   )
# 159 "CubyPar.fsy"
                 : 'Access));
# 1220 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CubyPar.fsy"
                                                               AccessDeclareReference (Access _2)
                   )
# 160 "CubyPar.fsy"
                 : 'Access));
# 1231 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CubyPar.fsy"
                                                               AccessDeclareReference _2         
                   )
# 161 "CubyPar.fsy"
                 : 'Access));
# 1242 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "CubyPar.fsy"
                                                               AccessIndex(_1, _3)    
                   )
# 162 "CubyPar.fsy"
                 : 'Access));
# 1254 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CubyPar.fsy"
                                                               []       
                   )
# 166 "CubyPar.fsy"
                 : 'Exprs));
# 1264 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "CubyPar.fsy"
                                                               _1       
                   )
# 167 "CubyPar.fsy"
                 : 'Exprs));
# 1275 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "CubyPar.fsy"
                                                               [_1]     
                   )
# 171 "CubyPar.fsy"
                 : 'Exprs1));
# 1286 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "CubyPar.fsy"
                                                               _1 :: _3 
                   )
# 172 "CubyPar.fsy"
                 : 'Exprs1));
# 1298 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "CubyPar.fsy"
                                                               _1       
                   )
# 176 "CubyPar.fsy"
                 : 'Const));
# 1309 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "CubyPar.fsy"
                                                               _1       
                   )
# 177 "CubyPar.fsy"
                 : 'Const));
# 1320 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "CubyPar.fsy"
                                                               - _2     
                   )
# 178 "CubyPar.fsy"
                 : 'Const));
# 1331 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "CubyPar.fsy"
                                                               -1       
                   )
# 179 "CubyPar.fsy"
                 : 'Const));
# 1341 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "CubyPar.fsy"
                                                               _1       
                   )
# 182 "CubyPar.fsy"
                 : 'ConstString));
# 1352 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "CubyPar.fsy"
                                                               TypeInt      
                   )
# 185 "CubyPar.fsy"
                 : 'Type));
# 1362 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "CubyPar.fsy"
                                                               TypeChar     
                   )
# 186 "CubyPar.fsy"
                 : 'Type));
# 1372 "CubyPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "CubyPar.fsy"
                                                               TypeString   
                   )
# 187 "CubyPar.fsy"
                 : 'Type));
|]
# 1383 "CubyPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 53;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : AbstractSyntax.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
