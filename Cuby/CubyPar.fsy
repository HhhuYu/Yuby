%{

open AbstractSyntax

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = ConstInt 10

let first  (a, _, _) = a
let second (_, b, _) = b
let third  (_, _, c) = c

%}

%token <int> CSTINT CSTBOOL
%token <string> CSTSTRING NAME

%token CHAR ELSE IF INT NULL PRINT PRINTLN RETURN VOID WHILE SWITCH CASE FOR IN RANGE STRING
%token PLUS MINUS TIMES DIV MOD SELFPLUS SELFMINUS
%token EQ NE GT LT GE LE
%token NOT SEQOR SEQAND
%token LPAR RPAR LBRACE RBRACE LBRACK RBRACK SEMI COMMA ASSIGN AMP COLON CONTINUE BREAK
%token EOF

%right ASSIGN             /* lowest precedence */
%nonassoc PRINT
%left SEQOR
%left SEQAND
%left EQ NE 
%left GT LT GE LE
%left PLUS MINUS
%left TIMES DIV MOD 
%right NOT AMP SELFPLUS SELFMINUS 
%nonassoc LBRACK          /* highest precedence  */


%start Main
%type <AbstractSyntax.Program> Main 

%%

Main:
    TopDeclares EOF                     { Prog $1 }
;

TopDeclares:
    /* empty */                         { [] }
  | TopDeclare TopDeclares              { $1 :: $2 }
;

TopDeclare: 
    VariableDeclare SEMI                { VariableDeclare(fst $1, snd $1) }
  | VariableDeclareAndAssign SEMI       { VariableDeclareAndAssign(first $1, second $1 , third $1)  }
  | FunctionDeclare                     { $1 }
;

VariableDeclare:
    Type VariableDescribe                { ((fst $2) $1, snd $2 ) }
;

VariableDeclareAndAssign:
    Type VariableDescribe ASSIGN Expr    { ((fst $2) $1, snd $2 , $4) }

VariableDescribe: 
    NAME                                 { ((fun t -> t), $1)                      }
  | TIMES VariableDescribe               { compose1 TypePoint $2                        }
  | LPAR VariableDescribe RPAR           { $2                                      } 
  | VariableDescribe LBRACK RBRACK               { compose1 (fun t -> TypeArray(t, None)) $1    }
  | VariableDescribe LBRACK CSTINT RBRACK        { compose1 (fun t -> TypeArray(t, Some $3)) $1 }
;

FunctionDeclare:
    VOID NAME LPAR ParamDeclares RPAR Block { FunctionDeclare(None,     $2, $4, $6) }
  | Type NAME LPAR ParamDeclares RPAR Block { FunctionDeclare(Some($1), $2, $4, $6) }
;

ParamDeclares:
    /* empty */                         { [] }
  | ParamDeclaresNotEmpty               { $1 }
;

ParamDeclaresNotEmpty:
    VariableDeclare                                   { [$1]     }
  | VariableDeclare COMMA ParamDeclaresNotEmpty       { $1 :: $3 }
;

Block:
    LBRACE StmtOrDeclareSeq RBRACE          { Block $2 }
;

StmtOrDeclareSeq:
    /* empty */                         { [] }
  | Stmt StmtOrDeclareSeq                 { Statement $1 :: $2 }
  | VariableDeclare SEMI StmtOrDeclareSeq { Declare (fst $1, snd $1) :: $3 }
  | VariableDeclareAndAssign SEMI StmtOrDeclareSeq { DeclareAndAssign(first $1, second $1 , third $1) :: $3 }
;

Stmt: 
    StmtM                               { $1 }
  | StmtU                               { $1 }
;

StmtM:  /* No unbalanced if-else */
    Expr SEMI                           { Expression($1)       }
  | RETURN SEMI                         { Return None          }
  //| BREAK SEMI                          { }
  //| CONTINUE SEMI                       { }
  | RETURN Expr SEMI                    { Return(Some($2))     }
  | Block                               { $1                   }
  | FOR LPAR Expr SEMI Expr SEMI Expr RPAR StmtM     { For($3,$5,$7,$9)  }
  | FOR Expr IN LPAR Expr RANGE Expr RPAR StmtM      { Range($2,$5,$7,$9)}
  | IF LPAR Expr RPAR StmtM ELSE StmtM  { If($3, $5, $7)       }
  | WHILE LPAR Expr RPAR StmtM          { While($3, $5)        }
  | SWITCH LPAR Expr RPAR LBRACE StmtC RBRACE        { Switch($3,$6)  }                                 // (*casecase*)
;

StmtC:
    CASE Const COLON StmtM               { [Case($2,$4)]}  
  | CASE Const COLON StmtM StmtC         { Case($2,$4) :: $5}
   

StmtU:
    IF LPAR Expr RPAR StmtM ELSE StmtU  { If($3, $5, $7)       }
  | IF LPAR Expr RPAR Stmt              { If($3, $5, Block []) }
  | WHILE LPAR Expr RPAR StmtU          { While($3, $5)        }
;

Expr: 
    Access                              { Access $1           }
  | ExprNotAccess                       { $1                  }
;

ExprNotAccess:
    AtExprNotAccess                     { $1                  }
  | Access ASSIGN Expr                  { Assign($1, $3)      }
  | NAME LPAR Exprs RPAR                { CallOperator($1, $3)        }  
  | NOT Expr                            { UnaryPrimitiveOperator("!", $2)      }
  | PRINT Expr                          { UnaryPrimitiveOperator("printi", $2) }
  | Expr SELFPLUS                       { UnaryPrimitiveOperator("I++", $1)     }
  | Expr SELFMINUS                      { UnaryPrimitiveOperator("I--", $1)     }
  | SELFPLUS Expr                       { UnaryPrimitiveOperator("++I", $2)     }
  | SELFMINUS  Expr                     { UnaryPrimitiveOperator("--I", $2)     }
  | PRINTLN                             { UnaryPrimitiveOperator("printc", nl) }
  | Expr PLUS  Expr                     { BinaryPrimitiveOperator("+",  $1, $3) }
  | Expr MINUS Expr                     { BinaryPrimitiveOperator("-",  $1, $3) }
  | Expr TIMES Expr                     { BinaryPrimitiveOperator("*",  $1, $3) }
  | Expr DIV   Expr                     { BinaryPrimitiveOperator("/",  $1, $3) }
  | Expr MOD   Expr                     { BinaryPrimitiveOperator("%",  $1, $3) }
  | Expr EQ    Expr                     { BinaryPrimitiveOperator("==", $1, $3) }
  | Expr NE    Expr                     { BinaryPrimitiveOperator("!=", $1, $3) }
  | Expr GT    Expr                     { BinaryPrimitiveOperator(">",  $1, $3) }
  | Expr LT    Expr                     { BinaryPrimitiveOperator("<",  $1, $3) }
  | Expr GE    Expr                     { BinaryPrimitiveOperator(">=", $1, $3) }
  | Expr LE    Expr                     { BinaryPrimitiveOperator("<=", $1, $3) }
  | Expr SEQAND Expr                    { AndOperator($1, $3)     }
  | Expr SEQOR  Expr                    { OrOperator($1, $3)      }
;

AtExprNotAccess:
    Const                               { ConstInt $1             }
  | ConstString                         { ConstString($1)         }
  | LPAR ExprNotAccess RPAR             { $2                      } 
  | AMP Access                          { Address $2              }
; 

Access:
    NAME                                { AccessVariable $1           }
  | LPAR Access RPAR                    { $2                  }  
  | TIMES Access                        { AccessDeclareReference (Access $2)}
  | TIMES AtExprNotAccess               { AccessDeclareReference $2         }
  | Access LBRACK Expr RBRACK           { AccessIndex($1, $3)    }   
;

Exprs:
    /* empty */                         { []       }
  | Exprs1                              { $1       }
;

Exprs1:
    Expr                                { [$1]     }
  | Expr COMMA Exprs1                   { $1 :: $3 }
;

Const:
    CSTINT                              { $1       }
  | CSTBOOL                             { $1       }
  | MINUS CSTINT                        { - $2     }
  | NULL                                { -1       }
;
ConstString:
  CSTSTRING                             { $1       }
 
Type:
    INT                                 { TypeInt      }
  | CHAR                                { TypeChar     }
  | STRING                              { TypeString   }
;
