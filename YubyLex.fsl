{

module YubyLex
  
open Microsoft.FSharp.Text.Lexing
open YubyPar;

let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

(* Scan keywords as identifiers and use this function to distinguish them. *)
(* If the set of keywords is large, use a hashtable instead.               *)

let keyword s =
    match s with
    | "else"    -> ELSE
    | "elsif"   -> ELSIF
    | "false"   -> CSTINT 0   (* FalseClass *)
    | "if"      -> IF
    | "nil "    -> NIL
    | "print"   -> PRINT
    | "puts"    -> PUTS
    | "return"  -> RETURN
    | "true"    -> CSTINT 1    (* TrueClass *)
    | "while"   -> WHILE       
    | "case"    -> CASE
    | "BEGIN"   -> BEGINBLOCK
    | "END"     -> ENDBLOCK
    | "def"     -> DEF
    | "class"   -> CLASS   
    | "self"    -> SELF
    | "in"      -> IN
    | "do"      -> DO
    | "redo"    -> REDO
    | "next"    -> NEXT
    | "end"     -> END
    | "then"    -> THEN
    | "and"     -> SEQAND2     (* same meaning of && *)
    | "or"      -> SEQNOT2     (* same meaning of || *)
    | "not"     -> NOT2        (* same meaning of ! *)
    | _         -> NAME s
 
let cEscape s = 
    match s with 
    | "\\\\" -> '\\'
    | "\\\"" -> '\"'
    | "\\a"  -> '\007'
    | "\\b"  -> '\008'
    | "\\t"  -> '\t'
    | "\\n"  -> '\n'
    | "\\v"  -> '\011'
    | "\\f"  -> '\012'
    | "\\r"  -> '\r'
    | _      -> failwith "Lexer error: impossible C escape"
}

rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }  
  | ['a'-'z''A'-'Z''_']['a'-'z''A'-'Z''0'-'9''_']*      (* support variable start with _ *)
                    { keyword (lexemeAsString lexbuf) } 
  | '+'             { PLUS } 
  | '-'             { MINUS } 
  | '*'             { TIMES } 
  | '**'            { POWER }   (* power *)
  | '/'             { DIV } 
  | '%'             { MOD }                     
  | '='             { ASSIGN } 
  | "=="            { EQ } 
  | "==="           { BELONG }
  | "!="            { NE }
  | ":"             { COLON }  
  | "$"             { GV }      (* global variable*)
  | "@"             { IV }      (* instance variable*)
  | "@@"            { CV }      (* class variable*)
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | "||"            { SEQOR }                     
  | "&&"            { SEQAND }                     
  | "&"             { AMP }                     
  | "!"             { NOT }                     
  | '('             { LPAR }
  | ')'             { RPAR }
  | '{'             { LBRACE }
  | '}'             { RBRACE }
  | '['             { LBRACK }
  | ']'             { RBRACK }
  | ';'             { SEMI }
  | ','             { COMMA }
  | '.'             { VISIT }
  | '..'            { RANGE }
  | "//"            { EndLineComment lexbuf; Token lexbuf }
  | "/*"            { Comment lexbuf; Token lexbuf }
  | '"'             { CSTSTRING (String [] lexbuf) }
  | eof             { EOF }
  | _               { failwith "Lexer error: illegal symbol" }